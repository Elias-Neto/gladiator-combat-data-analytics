# Importe as bibliotecas necessÃ¡rias
import pandas as pd
import streamlit as st

# ConfiguraÃ§Ãµes de tÃ­tulo e Ã­cones
st.set_page_config(page_title="Indicadores EstatÃ­sticos", page_icon="ğŸ“Š")

# FunÃ§Ã£o para carregar os dados da base de dados
@st.cache_data
def load_data():
    data = pd.read_csv('gladiator_data3.csv')
    return data

# Carregue os dados
data = load_data()

# SeÃ§Ã£o para filtros
st.sidebar.header("Filtros")

# Adicione filtros para Age, Origin, Category, Special Skills, Weapon of Choice
selected_age = st.sidebar.slider("Selecione a Idade:", min_value=int(data['Age'].min()), max_value=int(data['Age'].max()), value=(int(data['Age'].min()), int(data['Age'].max())))
selected_origin = st.sidebar.selectbox("Selecione a Origem:", ["Todos"] + list(data['Origin'].unique()))
selected_category = st.sidebar.selectbox("Selecione a Categoria:", ["Todos"] + list(data['Category'].unique()))
selected_skills = st.sidebar.selectbox("Selecione as Habilidades Especiais:", ["Todos"] + list(data['Special Skills'].unique()))
selected_weapon = st.sidebar.selectbox("Selecione a Arma de Escolha:", ["Todos"] + list(data['Weapon of Choice'].unique()))

# Aplique os filtros
filtered_data = data[
    (data['Age'] >= selected_age[0]) & (data['Age'] <= selected_age[1]) &
    ((data['Origin'] == selected_origin) | (selected_origin == "Todos")) &
    ((data['Category'] == selected_category) | (selected_category == "Todos")) &
    ((data['Special Skills'] == selected_skills) | (selected_skills == "Todos")) &
    ((data['Weapon of Choice'] == selected_weapon) | (selected_weapon == "Todos"))
]

# TÃ­tulo da pÃ¡gina
st.title("Indicadores EstatÃ­sticos Gerais da Base de Dados")

# Total de combates
total_combats = filtered_data['Wins'].sum() + filtered_data['Losses'].sum()

# Porcentagem de vitÃ³ria
win_percentage = (filtered_data['Wins'].sum() / total_combats) * 100

# MÃ©dia de VitÃ³rias por Combate
avg_wins_per_combat = filtered_data['Wins'].mean()

# MÃ©dia de Idade dos Gladiadores
avg_age = filtered_data['Age'].mean()

# Porcentagem de Gladiadores que Sobreviveram
survival_percentage = (filtered_data['Survived'].sum() / len(filtered_data)) * 100

# MÃ©dia de Peso dos Gladiadores
avg_weight = filtered_data['Weight'].mean()

# MÃ©dia de Altura dos Gladiadores
avg_height = filtered_data['Height'].mean()

# MÃ©dia de ExperiÃªncia em Combate
avg_battle_experience = filtered_data['Battle Experience'].mean()

# Maior NÃºmero de VitÃ³rias
max_wins = filtered_data['Wins'].max()

# Maior NÃºmero de Derrotas
max_losses = filtered_data['Losses'].max()

# MÃ©dia de Popularidade (Public Favor)
avg_public_favor = filtered_data['Public Favor'].mean()

# MÃ©dia de ResiliÃªncia Mental (Mental Resilience)
avg_mental_resilience = filtered_data['Mental Resilience'].mean()

# Categoria mais Vitoriosa
most_victorious_category = filtered_data['Category'].mode().values[0]

# Armas Escolhida mais Vitoriosa
most_victorious_weapon = filtered_data['Weapon of Choice'].mode().values[0]

# EstratÃ©gia de Batalha mais Vitoriosa
most_victorious_strategy = filtered_data['Battle Strategy'].mode().values[0]

# Crie a tabela com os indicadores estatÃ­sticos
tabela_estatisticas = pd.DataFrame({
    'Indicador EstatÃ­stico': [
        "Total de Combates", "Porcentagem de VitÃ³ria", "MÃ©dia de VitÃ³rias por Combate", "MÃ©dia de Idade dos Gladiadores", "Porcentagem de Gladiadores que Sobreviveram",
        "MÃ©dia de Peso dos Gladiadores", "MÃ©dia de Altura dos Gladiadores", "MÃ©dia de ExperiÃªncia em Combate", "Maior NÃºmero de VitÃ³rias", "Maior NÃºmero de Derrotas",
        "MÃ©dia de Popularidade", "MÃ©dia de ResiliÃªncia Mental", "Categoria mais Vitoriosa", "Armas Escolhida mais Vitoriosa", "EstratÃ©gia de Batalha mais Vitoriosa"
    ],
    'Valor': [
        total_combats, f"{win_percentage:.2f}%", f"{avg_wins_per_combat:.2f}", f"{avg_age:.2f} anos", f"{survival_percentage:.2f}%",
        f"{avg_weight:.2f} kg", f"{avg_height:.2f} cm", f"{avg_battle_experience:.2f}", max_wins, max_losses,
        f"{avg_public_favor:.2f}", f"{avg_mental_resilience:.2f}", most_victorious_category, most_victorious_weapon, most_victorious_strategy
    ]
})

# Exiba a tabela
st.table(tabela_estatisticas)
